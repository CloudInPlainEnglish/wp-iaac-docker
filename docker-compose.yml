version: "3.3"
services:
  db:
    image: mysql:5.7
    volumes:
      - db:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "${MySQL_PW_ROOT}"
      MYSQL_DATABASE: "${MySQL_DB_Name}"
      MYSQL_USER: "${MySQL_User}"
      MYSQL_PASSWORD: "${MySQL_PW}"

  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    ports:
      - 8080:80
    restart: always
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_NAME: "${MySQL_DB_Name}"
      WORDPRESS_DB_USER: "${MySQL_User}"
      WORDPRESS_DB_PASSWORD: "${MySQL_PW}"
      WORDPRESS_TABLE_PREFIX: "wp_"
      WORDPRESS_DEBUG: 0
    # vstm: add shared volume
    volumes:
      - wordpress:/var/www/html

  wordpress-cli:
    depends_on:
      - db
      - wordpress
    image: wordpress:cli
    # vstm: This is required to run wordpress-cli with the same
    # user-id as wordpress. This way there are no permission problems
    # when running the cli
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_NAME: "${MySQL_DB_Name}"
      WORDPRESS_DB_USER: "${MySQL_User}"
      WORDPRESS_DB_PASSWORD: "${MySQL_PW}"
      WORDPRESS_TABLE_PREFIX: "wp_"
    user: xfs
    # vstm: The sleep 10 is required so that the command is run after
    # mysql is initialized. Depending on your machine this might take
    # longer or it can go faster.
    #CIPE: Set Entry point to WP CLI command. Runins --info command and closes unless command overrides by using docker-compose run
    #Example command "docker-compose run -rm my-wpcli post list"
    entrypoint: wp 
    command: "--info"
    # vstm: add shared volume
    volumes:
      - wordpress:/var/www/html

volumes:
  db:
  # vstm: add shared volume
  wordpress:
  
  
  #pending items clarify XFS and mysql random root, also check debug setting.
